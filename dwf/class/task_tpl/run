<?php

/**
 * Cette classe gère les tâches différé.
 * Ce script doit ètre lancé en mode console (CLI) pour executer les tâches 
 *
 * @author LEGAGNEUR Matthieu <legagneur.matthieu@gmail.com>
 */
class task_run {

    public function __construct() {
        try {
            $this->classloader();
            include "../class/config.class.php";
            date_default_timezone_set("Europe/Paris");
            $this->entityloader();
            application::$_bdd = new bdd();
            $this->workerloader();
            $this->security_purge();
            task_manager::run();
        } catch (Exception $e) {
            dwf_exception::print_exception($e, "", true);
        }
    }

    /**
     * Inclut toutes les classes du framework 
     */
    private function classloader() {
        spl_autoload_register(function ($class) {
            $file = __DIR__ . "/../../../dwf/class/" . $class . ".class.php";
            if (file_exists($file)) {
                require_once $file;
            }
        });
    }

    /**
     * Inclut les entités du projet 
     */
    private function entityloader() {
        spl_autoload_register(function ($class) {
            $file = __DIR__ . "/../class/entity/" . $class . ".class.php";
            if (file_exists($file)) {
                require_once $file;
            }
        });
    }

    /**
     * Inclut toutes les classes du dossier "task_worker" se finissant par ".worker.php" 
     */
    private function workerloader() {
        spl_autoload_register(function ($class) {
            $file = __DIR__ . "/" . $class . ".worker.php";
            if (file_exists($file)) {
                require_once $file;
            }
        });
    }

    /**
     * Supprime tous les fichiers se terminant par .php~ (trill) dans le dossier <br /> 
     * Cette fonction est recommandée sur les serveurs de production Linux pour des raisons de sécurité <br /> 
     * certains hébergeurs tolèrent mal cette fonction, elle peut être désactivée en commentant la ligne 
     * "$this->security_purge();" dans le constructeur. 
     */
    private function security_purge() {
        foreach (glob("*.php~") as $trill) {
            unlink($trill);
        }
    }

}
new task_run();